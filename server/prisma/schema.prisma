// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum STATUS {
  ACTIVE
  DEACTIVATED
  PENDING
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum GENDER {
  MALE
  FEMALE
}

model User {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String         @unique
  passwordHash   String
  activeStatus   STATUS         @default(ACTIVE)
  otp            String?
  otpCreatedAt   DateTime?      @default(now())
  otpExpiry      DateTime?      @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employees  Employee[]
  manager    Manager?
  role           Role           @default(EMPLOYEE)
}

model Employee {
  id        Int     @id @default(autoincrement())
  userId     Int
  deptId    Int
  jobTitle  String
  gender    GENDER
  imageUrl  String
  address   Address[]
  department Department @relation(fields: [deptId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  LeaveRequest LeaveRequest[]
}

model Manager {
  id   Int     @id @default(autoincrement())
  userId     Int @unique
  deptId  Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  department     Department[]
  user       User     @relation(fields: [userId], references: [id])
}

model Department {
  id        Int     @id @default(autoincrement())
  managerId   Int
  name      String  @unique
  type      String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  manager    Manager @relation(fields: [managerId], references: [id])
  employees  Employee[]
}

model LeaveRequest {
  id          Int         @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  leaveType   LeaveType   @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId Int
  startDate   DateTime
  endDate     DateTime
  description String
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LeaveType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  maxDays       Int // Max number of days allowed
  status        Boolean // true for active, false for inactive
  leaveRequests LeaveRequest[]
}

model Address {
  id     Int     @id @default(autoincrement())
  employeeId   Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  city   String
  subcity  String
  houseNumber  String
}